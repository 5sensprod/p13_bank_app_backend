swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/{userId}/accounts:
    get:
      security:
        - Bearer: []
      tags:
        - Account Module
      summary: Retrieve all accounts of a user
      parameters:
        - in: path
          name: userId
          required: true
          type: string
          description: User's ID
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: Accounts successfully retrieved
        '400':
          description: Invalid data
        '401':
          description: Authentication required
        '404':
          description: User not found
        '500':
          description: Server error
    post:
      security:
        - Bearer: []
      tags:
        - Account Module
      summary: Create a new account for a user
      parameters:
        - in: path
          name: userId
          required: true
          type: string
          description: User's ID
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Account'
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
      produces:
        - application/json
      responses:
      '201':
        description: Account successfully created
      '400':
        description: Invalid data
      '401':
        description: Authentication required
      '500':
        description: Server error
  /user/{userId}/accounts/{accountId}:
    get:
      security:
        - Bearer: []
      summary: Retrieve a specific account of a user
      tags:
        - Account
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user
          schema:
            type: string
        - in: path
          name: accountId
          required: true
          description: ID of the account
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/definitions/Account'
        '404':
          description: Account not found
        '500':
          description: Server error
    put:
      security:
        - Bearer: []
      summary: Update a specific account
      tags:
        - Account
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user
          schema:
            type: string
        - in: path
          name: accountId
          required: true
          description: ID of the account
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Account'
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/definitions/Account'
        '404':
          description: Account not found
        '500':
          description: Server error
    delete:
      security:
        - Bearer: []
      summary: Delete an account
      tags:
        - Account
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user
          schema:
            type: string
        - in: path
          name: accountId
          required: true
          description: ID of the account
          schema:
            type: string
      responses:
        '200':
          description: Account deleted successfully
        '404':
          description: Account not found
        '500':
          description: Server error
  /user/{userId}/bulk-accounts:
    post:
      security:
        - Bearer: []
      summary: Create multiple accounts for a user
      tags:
        - Account
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/Account'
            description: Array of accounts to be created
      responses:
        '201':
          description: Accounts created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/Account'
        '400':
          description: Bad Request
        '500':
          description: Server error
  /account/{accountId}/transactions:
    get:
      security:
        - Bearer: []
      summary: Retrieve transactions for a specific account
      tags:
        - Transaction
      parameters:
        - in: path
          name: accountId
          required: true
          description: ID of the account
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/Transaction'
        '400':
          description: Bad Request
        '500':
          description: Server error
    post:
      security:
        - Bearer: []
      summary: Create a new transaction for a specific account
      tags:
        - Transaction
      parameters:
        - in: path
          name: accountId
          required: true
          description: ID of the account
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Transaction'
      responses:
        '201':
          description: Successfully created transaction
          content:
            application/json:
              schema:
                $ref: '#/definitions/Transaction'
        '400':
          description: Bad Request
        '500':
          description: Server error
  /account/{accountId}/transactions/{transactionId}:
    delete:
      security:
        - Bearer: []
      summary: Delete a specific transaction
      tags:
        - Transaction
      parameters:
        - in: path
          name: accountId
          required: true
          description: ID of the account
          schema:
            type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to be deleted
          schema:
            type: string
      responses:
        '200':
          description: Transaction deleted successfully
        '404':
          description: Transaction not found
        '500':
          description: Server error
    put:
      security:
        - Bearer: []
      summary: Update a specific transaction
      tags:
        - Transaction
      parameters:
        - in: path
          name: accountId
          required: true
          description: ID of the account
          schema:
            type: string
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to be updated
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Transaction'
      responses:
        '200':
          description: Transaction successfully updated
          content:
            application/json:
              schema:
                $ref: '#/definitions/Transaction'
        '400':
          description: Invalid updates or Bad Request
        '404':
          description: Transaction not found
        '500':
          description: Server error
  /account/{accountId}/bulk-transactions:
    post:
      security:
        - Bearer: []
      summary: Create multiple transactions for a specific account
      tags:
        - Transaction
      parameters:
        - in: path
          name: accountId
          required: true
          description: ID of the account
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/definitions/Transaction'
      responses:
        '201':
          description: Successfully added transactions in bulk
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/Transaction'
        '400':
          description: Bad Request or Invalid transactions data
        '500':
          description: Server error
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
  Account:
      type: object
      required:
        - user
        - title
        - balance
        - description
      properties:
        user:
          type: string
        title:
          type: string
        balance:
          type: number
        description:
          type: string
        transactions:
          type: array
          items:
            type: string
  Transaction:
    type: object
    
    properties:
      account:
        type: string
        format: uuid
      date:
        type: string
        format: date-time
      description:
        type: string
      amount:
        type: number
      balance:
        type: number
      transactionType:
        type: string
        enum:
          - Electronic
          - Manual
          # Add other transaction types if any
      category:
        type: string
      notes:
        type: string
